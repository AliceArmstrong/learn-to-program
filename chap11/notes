\n <= newline
  puts "3...\n2...\n1...\nHAPPY NEW YEAR!"
>3...
>2...
>1...
>HAPPY NEW YEAR!

ruby 99bottles.rb > lyrics.txt # <= saves results of 99bottles program to new file
(Mecurial, source code management system)

  filename = 'ListerQuote.txt'
  test_string = 'I promise that I swear absolutely that ' +
  'I will never mention gazpacho soup again.'

  File.open filename, 'w' do |f| # <= 'w' means write-access to file
  f.write test_string
  end
  read_string = File.read filename
  puts(read_string == test_string)
>true

^ Creates file object, calls it 'f', runs all code, closes file.

YAML:
Format for representing objects as strings.

  require 'yaml' # <= imports YAML into program
  test_array = ['Give Quiche A Chance',
  'Mutants Out!',
  'Chameleonic Life-Forms, No Thanks']
  test_string = test_array.to_yaml # <= converts to string by creating YAML description of test_array

  filename = 'RimmerTShirts.txt'
  File.open filename, 'w' do |f|
  f.write test_string
  end
  read_string = File.read filename
  read_array = YAML::load read_string
  puts(read_string == test_string)
  puts(read_array == test_array )
>true
>true

  require 'yaml'
# First we define these fancy methods...
  def yaml_save object, filename
  File.open filename, 'w' do |f|
  f.write(object.to_yaml)
  end
  end
  def yaml_load filename
  yaml_string = File.read filename
  YAML::load yaml_string
  end
# ...and now we use these fancy methods.
  test_array = ['Slick Shoes',
  'Bully Blinders',
  'Pinchers of Peril']
  filename = 'DatasGadgets.txt'
# We save it...
  yaml_save test_array, filename
# We load it...
  read_array = yaml_load filename
  puts(read_array == test_array)
>true

Finding pictures to move(OS):
  Dir.chdir 'C:/Documents and Settings/Katy/PictureInbox'
# First we find all of the pictures to be moved.
  pic_names = Dir['F:/**/*.jpg']
  puts 'What would you like to call this batch?'
  batch_name = gets.chomp
  puts
  print "Downloading #{pic_names.length} files: "
# This will be our counter. We'll start at 1 today,
# though normally I like to count from 0.
  pic_number = 1
  pic_names.each do |name|
  print '.' # This is our "progress bar".
new_name = if pic_number < 10
  "#{batch_name}0#{pic_number}.jpg"
  else
  "#{batch_name}#{pic_number}.jpg"
  end
# This renames the picture, but since "name"
# has a big long path on it, and "new_name"
# doesn't, it also moves the file to the
# current working directory, which is now
# Katy's PictureInbox folder.
# Since it's a *move*, this effectively
# downloads and deletes the originals.
# And since this is a memory card, not a
# hard drive, each of these takes a second
# or so; hence, the little dots let her
# know that my program didn't hose her machine.
  File.rename name, new_name
# Finally, we increment the counter.
  pic_number = pic_number + 1
  end
