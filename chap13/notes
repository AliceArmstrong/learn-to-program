Creating new Classes

Rewriting 22.to_eng as english_number 22
  class Integer
  def to_eng
  if self == 5
  english = 'five'
  else
  english = 'forty-two'
  end
  english
  end
  end
  puts 5.to_eng
  puts 42.to_eng
>five
>forty-two

Using classes to make a dice-rolling class
  class Die
  def roll
  1 + rand(6) # <= random result between 1 and 6
  end
  end
  # Let's make a couple of dice...
  dice = [Die.new, Die.new]
  # ...and roll them.
  dice.each do |die|
  puts die.roll
  end
>4
>2
If we try to store the result in a local variable, it will disappear
once the program has finished running. To be used elsewhere, it
must be stored in an instance variable.

Instance variables(@)

An instance of a class is an object of that class.
Instance variables are an object's variables.
A method's local variables last until the method is finished.
An object's instance variables will last as long as the object.

  class Die
  def roll
  @number_showing = 1 + rand(6)
  end
  def showing
  @number_showing
  end
  end
  die = Die.new
  die.roll
  puts die.showing
  puts die.showing
  die.roll
  puts die.showing
  puts die.showing
>1
>1
>2
>2

It would be nice if we could set up our new Die object right when
it’s created. That’s what initialize is for; as soon as an object
is created, initialize is automatically called on it:
  class Die
  def initialize
  # I'll just roll the die, though we could do something else
  # if we wanted to, such as setting the die to have 6 showing.
  roll
  end
  def roll
  @number_showing = 1 + rand(6)
  end
  def showing
  @number_showing
  end
  end
  puts Die.new.showing
>6

  class Dragon
  def initialize name
  @name = name
  @asleep = false
  @stuff_in_belly = 10 # He's full.
  @stuff_in_intestine = 0 # He doesn't need to go.
  puts "#{@name} is born."
  end
  def feed
  puts "You feed #{@name}."
  @stuff_in_belly = 10
  passage_of_time
  end
  def walk
  puts "You walk #{@name}."
  @stuff_in_intestine = 0
  passage_of_time
  end
  def put_to_bed
  puts "You put #{@name} to bed."
  @asleep = true
  3.times do
  if @asleep
  passage_of_time
  end
  if @asleep
  puts "#{@name} snores, filling the room with smoke."
  end
  end
  if @asleep
  @asleep = false
  puts "#{@name} wakes up slowly."
  end
  end
  def toss
  puts "You toss #{@name} up into the air."
  puts 'He giggles, which singes your eyebrows.'
  passage_of_time
  end
  def rock
  puts "You rock #{@name} gently."
  @asleep = true
  puts 'He briefly dozes off...'
  passage_of_time
  if @asleep
  @asleep = false
  puts '...but wakes when you stop.'
  end
  end
  private
  # "private" means that the methods defined here are
  # methods internal to the object. (You can feed your
  # dragon, but you can't ask him whether he's hungry.)
  def hungry?
  # Method names can end with "?".
  # Usually, we do this only if the method
  # returns true or false, like this:
  @stuff_in_belly <= 2
  end
  def poopy?
  @stuff_in_intestine >= 8
  end
  def passage_of_time
  if @stuff_in_belly > 0
  # Move food from belly to intestine.
  @stuff_in_belly = @stuff_in_belly - 1
  @stuff_in_intestine = @stuff_in_intestine + 1
  else # Our dragon is starving!
  if @asleep
  @asleep = false
  puts 'He wakes up suddenly!'
  end
  puts "#{@name} is starving! In desperation, he ate YOU!"
  exit # This quits the program.
  end
  report erratum • discuss
  Baby Dragon • 109
  if @stuff_in_intestine >= 10
  @stuff_in_intestine = 0
  puts "Whoops! #{@name} had an accident..."
  end
  if hungry?
  if @asleep
  @asleep = false
  puts 'He wakes up suddenly!'
  end
  puts "#{@name}'s stomach grumbles..."
  end
  if poopy?
  if @asleep
  @asleep = false
  puts 'He wakes up suddenly!'
  end
  puts "#{@name} does the potty dance..."
  end
  end
  end
  pet = Dragon.new 'Norbert'
  pet.feed
  pet.toss
  pet.walk
  pet.put_to_bed
  pet.rock
  pet.put_to_bed
  pet.put_to_bed
  pet.put_to_bed
  pet.put_to_bed
  Norbert is born.

>You feed Norbert.
>You toss Norbert up into the air.
>He giggles, which singes your eyebrows.
>You walk Norbert.
>You put Norbert to bed.
>Norbert snores, filling the room with smoke.
>Norbert snores, filling the room with smoke.
>Norbert snores, filling the room with smoke.
>Norbert wakes up slowly.
>You rock Norbert gently.
>He briefly dozes off...
>...but wakes when you stop.
>You put Norbert to bed.
>He wakes up suddenly!
>Norbert's stomach grumbles...
>You put Norbert to bed.
>He wakes up suddenly!
>Norbert's stomach grumbles...
>You put Norbert to bed.
>He wakes up suddenly!
>Norbert's stomach grumbles...
>Norbert does the potty dance...
>You put Norbert to bed.
>He wakes up suddenly!
>Norbert is starving! In desperation, he ate YOU!
