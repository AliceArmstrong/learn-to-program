Blocks and procs

The ability to take a block (do-end) of code, wrap it up in an object (proc),
store it in a variable or pass it to a method, and run the code in
the block whenever needed.

  toast = Proc.new do
  puts 'Cheers!'
  end
  toast.call
  toast.call
  toast.call
>Cheers!
>Cheers!
>Cheers!

The proc holds the block of code, and executes it three times.
Like methods, blocks can take parameters:
  do_you_like = Proc.new do |good_stuff|
  puts "I *really* like #{good_stuff}!"
  end
  do_you_like.call 'chocolate'
  do_you_like.call 'Ruby'
>I *really* like chocolate!
>I *really* like Ruby!

  def do_self_importantly some_proc
  puts "Everybody just HOLD ON! I'm doing something..."
  some_proc.call
  puts "OK everyone, I'm done. As you were."
  end
  say_hello = Proc.new do
  puts 'hello'
  end
  say_goodbye = Proc.new do
  puts 'goodbye'
  end
  do_self_importantly say_hello
  do_self_importantly say_goodbye
  Everybody just HOLD ON! I'm doing something...
>hello
>OK everyone, I'm done. As you were.
>Everybody just HOLD ON! I'm doing something...
>goodbye
>OK everyone, I'm done. As you were.

If you want to save or load a file, you have to open the file,
write or read the relevant data, and then close the file.
If you forget to close the file, Bad Things can happen. But each
time you want to save or load a file, you have to do the same
thing: open the file, do what you really want to do, and
then close the file.

You can also write methods that will determine how many times (or even
whether) to call a proc. Hereâ€™s a method that will call the proc passed in about
half of the time and another that will call it twice:
  def maybe_do some_proc
  if rand(2) == 0
  some_proc.call
  end
  end

  def twice_do some_proc
  some_proc.call
  some_proc.call
  end

  wink = Proc.new do
  puts '<wink>'
  end

  glance = Proc.new do
  puts '<glance>'
  end

  maybe_do wink
  maybe_do wink
  maybe_do glance
  maybe_do glance
  twice_do wink
  twice_do glance

The inspect method is a lot like to_s, except the string it returns
tries to show you the Ruby code for building the object you passed it.
Here it shows us the whole array returned by our first call to do_until_false:

  def do_until_false first_input, some_proc
  input = first_input
  output = first_input
  while output
  input = output
  output = some_proc.call input
  end
  input
  end
  build_array_of_squares = Proc.new do |array|
  last_number = array.last
  if last_number <= 0
  false
  else
  # Take off the last number...
  array.pop
  # ...and replace it with its square...
  array.push last_number*last_number
  # ...followed by the next smaller number.
  array.push last_number-1
  end
  end
  always_false = Proc.new do |just_ignore_me|
  false
  end
  puts do_until_false([5], build_array_of_squares).inspect
  yum = 'lemonade with a hint of orange blossom water'
  puts do_until_false(yum, always_false)
>[25, 16, 9, 4, 1, 0]
>lemonade with a hint of orange blossom water

Methods that return procs

In this example, compose takes two procs and returns a new proc that, when
called, calls the first proc and passes its result into the second:
  def compose proc1, proc2
  Proc.new do |x|
  proc2.call(proc1.call(x))
  end
  end
  square_it = Proc.new do |x|
  x * x
  end
  double_it = Proc.new do |x|
  x + x
  end
  double_then_square = compose double_it, square_it
  square_then_double = compose square_it, double_it
  puts double_then_square.call(5)
  puts square_then_double.call(5)
>100
>50

Passing blocks into methods

  class Array
  def each_even(&was_a_block__now_a_proc)
  # We start with "true" because
  # arrays start with 0, which is even.
  is_even = true
  self.each do |object|
  if is_even
  was_a_block__now_a_proc.call object
  end
  # Toggle from even to odd, or odd to even.
  is_even = !is_even
  end
  end
  end
  fruits = ['apple', 'bad apple', 'cherry', 'durian']
  fruits.each_even do |fruit|
  puts "Yum! I just love #{fruit} pies, don't you?"
  end
  # Remember, we are getting the even-numbered *elements*
  # of the array, which in this case are all odd numbers,
  # because I live only to irritate you.
  [1, 2, 3, 4, 5].each_even do |odd_ball|
  puts "#{odd_ball} is NOT an even number!"
  end
>Yum! I just love apple pies, don't you?
>Yum! I just love cherry pies, don't you?
>1 is NOT an even number!
>3 is NOT an even number!
>5 is NOT an even number!

Method that takes the time before running the code block, then runs
it, then takes the time again at the end, and finally figures out
the difference:
  def profile block_description, &block
  start_time = Time.new
  block.call
  duration = Time.new - start_time
  puts "#{block_description}: #{duration} seconds"
  end
  profile '25000 doublings' do
  number = 1
  25000.times do
  number = number + number
  end
  puts "#{number.to_s.length} digits"
  # That's the number of digits in this HUGE number.
  end
  profile 'count to a million' do
  number = 0
  1000000.times do
  number = number + 1
  end
  end
  7526 digits
>25000 doublings: 0.044003 seconds
>count to a million: 0.072004 seconds
